
 









8.video
Példa servletek: http://localhost:8080/examples/servlets/
Server oldali alkalmazás írása keretrendszer nélkül
	Van egy kötelező felépítése: A tomcat-ben van egy webapps mappa, ami a webalkalmazások mappája, ebbe hozzuk létre a saját alkalmazásun mappáját. ElsoAlkalmazas (ez lesz a saját servletünk). A webapps mappában vannak már servletek, ezeket lárjuk megjelenni a tomcat oldalaként amikor elindítjuk a localhost:8080-at.
ElsoAlkalmazas
	WEB-INF
	- src (kódot tárolja .java)
		- package mappák (egyezik a fájlban a package nevével)
			- .java fájlok (egyezik az osztály nevével)
	- lib (függőségek/dependency pl.:itext)	
	- classes (lefordult kód .class) --> ebből lesz a jar fajl
	- web.xml
	META-INF
Ami a web- és meta-inf mappákban van az nem elérhető a felhasználók számára, ami kívül az ElsoAlkalmazásban az igen (html, css, jsp, kép). Az src és classes mappa egymás tükörképei kell legyenek. A compiler fordítja le a .java-t .class-ra.

9.video
.java -> .class
cmd --> web-inf mappa --> javac -d (destination, hová) classes src\test\HelloServlet.java (forrás)
Amiket használok importként a fájlban, az kell létezzen az alkalmazásomban. A tomcat ezeket tartalmazza, csak át kell húznom ami kell. A C:\Program Files\Java\jdk1.8.0_144/jre/lib/ext mappába kell beletenni. Ez (jre) a futtatási környezet. Ha ez rendelkezik ezzel akkor az alkalmazásunk látni fogja.
Ha nem tesszük át akkor cmd-ben meg kell adni ennek a jar fájlnak az útvonalát:
	javac -d classes -cp ..\..\..\lib\servlet-api.jar src\test\HelloServlet.java 

10.video
web.xml: deployment descriptor (DD)
	 útvonalak --> mit ír be a felhasználó és milyen servletet ér el ezzel
	 servletek elnevezése, gyűjteménye

11.video

action: mit hívjon meg, mi fogja feldolgozni az adatokat a form elküldése után.
ElsoAlkalmazas/form.html --> form létrehozása, ezt közvetlenül eléri a felhasználó, mivel kívülre mentettük el.
Ha elküljük a formot, a benne található értékek a request.getParameter() - el tudjuk kiszedni (olyan mint php-ben a $_GET[]).

12.video
web.xml-ben be kell állítani az echo servlethez az útvonalat.
lefordítjuk a servletet


13.video
Az xml alapú konfigurációt (web.xml-ben regisztráljuk a servleteket és az útvonalat) kiválthatjuk annotáció alapú konfigurációval is.Pl.: @WebServlet(name = "feldolgozas", urlPatterns = {"/feldolgozas/*"})
A servlet egyszer van létrehozva és minden felhasználó ugyanazt a példányt fogja visszakapni.
Singleton - egy példány él belőle a JVM-ben és mindenki ugyanarra az egy objektumra hivatkozik, az osztályváltozók értéke ugyanat lesz, nem kell külön static-re állítani. A servlet is így viselkedik, de nem minden esetben, ezért nem mondjuk rá, hogy singleton. Vannak speciális esetei.
Servletben a doGet doPost-on kívül szoktuk használni és ezek is Override a getServletInfo (bármilyen infot beírhatunk amit ki akarunk íratni pl, ez függvény van visszatérési értéke), init (metódus, ez akkor fut le amikor a tomcat létrehozza az adott servletet, minden más előtt tehát - ezért itt csinálhatjuk pl az adatbázis kapcsolatot, kiolvashatunk konfigurációs fájlból adatokat stb.), destroy (amikor a servlet elpusztul akkor fut le - kapcsolatok lezárása, pl. adatbázisé. Fontos, hogy minden olyan kapcsolatot lezárjunk amire van lehetőség. Az adatbázis kapcsolatnak timeout-ot is lehet beállítani, amikor automatikusan bontja a kapcsolatot. )

14.video
JSP - java server pages -> automatikusan generál egy servletet, a html-t fogslmszhstjuk meg benne és írhatunk bele java kódot is.
Az alkalmazáson belül, de a WEB-INF mappán kívül hozzuk létre mint a sima html-t.
Konfigurációs fájl beolvasása: Ebben szokták megadni például az adatbázis kapcsolódáshoz szükséges adatokat stb. Így ha valami változik csak itt kell módosítani. WEB-INF-en belül hozzuk létre, a web.xml mellé.
